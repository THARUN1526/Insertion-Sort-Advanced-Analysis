In Insertion Sort, each element in the array is compared with the elements before it and inserted into its correct position in the sorted subarray. The number of times an element needs to be shifted during this process can be used as a measure of how far it is from its sorted position.

Let's consider an example to illustrate this:

Suppose we have an array `[4, 2, 1, 3]`. We start with an empty sorted subarray and iterate through the elements from left to right. For each element, we compare it with the elements before it in the sorted subarray and shift them to the right if they are greater.

- For the second element `2`, it is smaller than the first element `4`, so we shift `4` one position to the right.
- For the third element `1`, it is smaller than both `4` and `2`, so we shift `4` and `2` one position to the right.
- For the fourth element `3`, it is greater than `1` but smaller than `4`, so we insert it after `1` and before `4` without any shift.

In this example, the first element `4` did not require any shift. The second element `2` required one shift. The third element `1` required two shifts. The fourth element `3` required one shift.

The total number of shifts for this array is `0 + 1 + 2 + 1 = 4`.

If we generalize this process for any array of size `N`, we can see that the number of shifts for the `i`th element is the number of elements greater than it in the subarray before it. This can be denoted as `ki`.

Therefore, the total number of shifts for the entire array will be the sum of all the individual shifts: `k1 + k2 + ... + kN`.

In summary, to calculate the total number of shifts in Insertion Sort, we need to count the number of elements greater than each element in the sorted subarray before it and sum up these counts for all elements in the array.